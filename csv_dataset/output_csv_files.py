"""
output_csv_files.py 

This script outputs csv data for running relocalization with Matlab or C++ code.

Output:
- A seperate file for each image: pose, intrinsic, 2D line parameters, 2D line endpoints
- 3D line parameters 
- 3D line endpoints

Author: Haodong JIANG <221049033@link.cuhk.edu.cn>
Version: 1.0
License: MIT
"""

import numpy as np
import pandas as pd
import os

### load numpy file generated by line_map_extractor
# home = os.path.expanduser("~")
scene_list = ["69e5939669","689fec23d7","c173f62b15","55b2bf8036"]
scene_id = scene_list[3]
data_path = home+f"/SCORE/line_map_extractor/out/"+scene_id+"/"+scene_id+f"_results_merged.npy"
data = np.load(data_path, allow_pickle=True).item()
#
poses_all = data['scene_pose']
intrinsics_all = data['scene_intrinsic']
#
merged_line_3d_params = data['merged_scene_line_3d_params']
merged_line_3d_semantic_labels = data['merged_scene_line_3d_semantic_labels']
# 
scene_line_2d_params = data['scene_line_2d_params']
scene_line_2d_semantic_labels = data['scene_line_2d_semantic_labels']
scene_projection_error_r = data['scene_projection_error_r']
scene_projection_error_t = data['scene_projection_error_t']
line_2d_points = data['scene_line_2d_end_points']

### save path
base_path = home+f"/SCORE/csv_dataset/"+scene_id+"/"
pose_folder = base_path+"poses/"
intrinsic_folder = base_path+"intrinsics/"
line2d_folder = base_path+"lines2d/"

for folder in [pose_folder,intrinsic_folder,line2d_folder]:
    if not os.path.exists(folder):
        os.makedirs(folder)

### process images one bye one
while(len(scene_line_2d_semantic_labels)>0):
    frame_name,frame_semantics_label = scene_line_2d_semantic_labels.popitem()
    num_lines = len(frame_semantics_label)
    # store the pose and camera intrinsic for the cur image
    pose_this_frame = poses_all[frame_name] 
    intrinsic_vec = np.empty([1,4],dtype=float)  # fx cx fy cy
    intrinsic_vec[0][0] = intrinsics_all[frame_name][0][0]
    intrinsic_vec[0][1] = intrinsics_all[frame_name][0][2]
    intrinsic_vec[0][2] = intrinsics_all[frame_name][1][1]
    intrinsic_vec[0][3] = intrinsics_all[frame_name][1][2]   
    df_pose = pd.DataFrame(pose_this_frame, columns=['c1','c2','c3','c4'])
    df_pose.to_csv(pose_folder+frame_name+'.csv', index=False) 
    df_intrinsic = pd.DataFrame(intrinsic_vec, columns=['fx','cx','fy','cy'])
    df_intrinsic.to_csv(intrinsic_folder+frame_name+'.csv', index=False)  
    # store the 2D line information for the cur image
    proj_error_r = scene_projection_error_r[frame_name]
    proj_error_t = scene_projection_error_t[frame_name]
    lines_2d_thisframe = np.empty([num_lines,6],dtype=float) # used to store 2D line paramaters
    lines_2d_end_points = np.empty([2*num_lines,2],dtype=float) # used to store 2D line endpoints
    for j in range(0,num_lines):
        # normal vector(3x1), semantic label(1), projection error(2x1) 
        lines_2d_thisframe[j][0:3] = scene_line_2d_params[frame_name][j]
        lines_2d_thisframe[j][3] = frame_semantics_label[j]
        lines_2d_thisframe[j][4] = proj_error_r[j]
        lines_2d_thisframe[j][5] = proj_error_t[j]
        lines_2d_end_points[2*j] = line_2d_points[frame_name][j][0]
        lines_2d_end_points[2*j+1] = line_2d_points[frame_name][j][1]
    df_2d = pd.DataFrame(lines_2d_thisframe, columns=['A','B','C','semantic_label','proj_error_r','proj_error_t'])
    df_2d.to_csv(line2d_folder+frame_name+'2dlines.csv', index=False)
    df_2d_end = pd.DataFrame(lines_2d_end_points, columns=['u','v'])
    df_2d_end.to_csv(line2d_folder+frame_name+'2dlines_endpoints.csv', index=False)
    print(frame_name+'data processed')

### process all 3D lines in the scene
num_3d_line = len(merged_line_3d_params)
# 3D line params: position(3x1), direction(3x1), semantics(1)
lines_3d_all = np.empty([num_3d_line,7],dtype=float) 
for i  in range(0,num_3d_line):
    lines_3d_all[i][0:3] = merged_line_3d_params[i][0]
    lines_3d_all[i][3:6] = merged_line_3d_params[i][1]
    lines_3d_all[i][6] = merged_line_3d_semantic_labels[i]
df_3d = pd.DataFrame(lines_3d_all, columns=['x','y','z','vx','vy','vz','semantic_label'])
df_3d.to_csv(base_path+'3dlines.csv', index=False)

# 3D line endpoints
line_3d_endpoints= data['merged_scene_line_3d_end_points']
line_3d_end  =  np.empty([2*num_3d_line,3],dtype=float)
for i in range(0,num_3d_line):
    line_3d_end[2*i] = line_3d_endpoints[i][0]
    line_3d_end[2*i+1] = line_3d_endpoints[i][1]
df_3d_end = pd.DataFrame(line_3d_end, columns=['x','y','z'])
df_3d_end.to_csv(base_path+'3dlines_endpoints.csv', index=False)




